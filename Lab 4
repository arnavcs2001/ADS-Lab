// ADS
// Write a program to perform insertion and deletion operations on AVL trees.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <conio.h>
#include <time.h>
#include <stdbool.h>
#include <limits.h>
#include <inttypes.h>

struct Node
{
  int key;
  struct Node *lft;
  struct Node *rgt;
  int height;
};

int height(struct Node *N)
{
    if (N == NULL)
    {
        return 0;
    }
    else
    {
        return N->height;
    }
}

int max(int a, int b)
{
   if(a > b)
   {
       return a;
   }
   else
   {
       return b;
   }
}

struct Node* newNode(int key)
{
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->key = key;
    node->lft = NULL;
    node->rgt = NULL;
    node->height = 1;
    return node;
}

struct Node *rgtRotate(struct Node *y)
{
   struct Node *x = y->lft;
   struct Node *T2 = x->rgt;
   x->rgt = y;
   y->lft = T2;
   y->height = max(height(y->lft), height(y->rgt))+1;
   x->height = max(height(x->lft), height(x->rgt))+1;
   return x;
}

struct Node *lftRotate(struct Node *x)
{
    struct Node *y = x->rgt;
    struct Node *T2 = y->lft;
    y->lft = x;
    x->rgt = T2;
    x->height = max(height(x->lft), height(x->rgt))+1;
    y->height = max(height(y->lft), height(y->rgt))+1;
    return y;
}

int getBalance(struct Node *N)
{
    if(N == NULL)
    {
        return 0;
    }
    else
    {
        return height(N->lft) - height(N->rgt);
    }
}

struct Node* insert(struct Node* node, int key)
{
    if(node == NULL)
    {
        return newNode(key);
    }
    if(key < node->key)
    {
        node->lft  = insert(node->lft, key);
    }
    else if(key > node->key)
    {
        node->rgt = insert(node->rgt, key);
    }
    else
    {
        return node;
    }
    node->height = 1 + max(height(node->lft),height(node->rgt));
    int balance = getBalance(node);
    if(balance > 1 && key < node->lft->key)
    {
       return rgtRotate(node);
    }
    if(balance < -1 && key > node->rgt->key)
    {
       return lftRotate(node);
    }
    if(balance > 1 && key > node->lft->key)
    {
        node->lft =  lftRotate(node->lft);
        return rgtRotate(node);
    }
    if(balance < -1 && key < node->rgt->key)
    {
        node->rgt = rgtRotate(node->rgt);
        return lftRotate(node);
    }
    return node;
}

struct Node * minValueNode(struct Node* node)
{
    struct Node* current = node;
    while(current->lft != NULL) // loop down to find the lftmost leaf
    {
        current = current->lft;
    }
    return current;
}

struct Node* deleteNode(struct Node* root, int key)
{
    if(root == NULL)
    {
         return root;
    }
    if(key < root->key)
    {
         root->lft = deleteNode(root->lft, key);
    }
    else if(key > root->key)
    {
         root->rgt = deleteNode(root->rgt, key);
    }
    else
    {
        // Case 1: No children
        if(root->lft == NULL && root->rgt == NULL)
        {
            free(root);
            root = NULL;
        }
        // Case 2: One child
        else if(root->lft == NULL)
        {
            struct Node *temp = root;
            root = root->rgt;
            free(temp);
        }
        else if(root->rgt == NULL)
        {
            struct Node *temp = root;
            root = root->lft;
            free(temp);
        }
        else // Node with two children
        {
            struct Node* temp = minValueNode(root->rgt); // Get the inorder successor (smallest in the right subtree)
            root->key = temp->key; // Copy the inorder successor's data to this node
            root->rgt = deleteNode(root->rgt, temp->key); // Delete the inorder successor
        }
    }
    if(root == NULL)
    {
         return root;
    }
    root->height = 1 + max(height(root->lft),height(root->rgt));
    int balance = getBalance(root);
    if(balance > 1 && getBalance(root->lft) >= 0)
    {
         return rgtRotate(root);
    }
    if(balance > 1 && getBalance(root->lft) < 0)
    {
        root->lft =  lftRotate(root->lft);
        return rgtRotate(root);
    }
    if(balance < -1 && getBalance(root->rgt) <= 0)
    {
         return lftRotate(root);
    }
    if(balance < -1 && getBalance(root->rgt) > 0)
    {
        root->rgt = rgtRotate(root->rgt);
        return lftRotate(root);
    }
    return root;
}

void preOrder(struct Node *root)
{
    if(root != NULL)
    {
        printf("%d ", root->key);
        preOrder(root->lft);
        preOrder(root->rgt);
    }
}

int main()
{
    struct Node *root = NULL;
    int n,i,m,l,b,k;
    printf("Enter the number of nodes you want to add: ");
    scanf("%d",&n);
    printf("\nEnter the nodes: ");
    for(i=1;i<=n;i++)
    {
        scanf("%d",&m);
        root = insert(root,m);
    }
    printf("\nThe output of an AVL tree in preOrder form: \n");
    preOrder(root);
    printf("\n");
    printf("\nDo you want to delete any nodes?");
    printf("\n1=Yes,0=No\n");
    scanf("%d",&l);
    if(l==1)
    {
        printf("\nEnter the number of nodes you want to delete: ");
        scanf("%d",&b);
        printf("\nEnter the nodes you want to delete: ");
        for(i=1;i<=b;i++)
        {
            scanf("%d",&k);
            root = deleteNode(root, k);
        }
    }
    printf("\nThe tree in preOrder traversal outputs after deletion: \n");
    preOrder(root);
    printf("\n");
   
    return 0;
}
