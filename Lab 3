// ADS
// Program to perform insertion, deletion and searching operations on a skip list.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <conio.h>
#include <time.h>
#include <stdbool.h>
#include <limits.h>
#include <inttypes.h>

#define SKIPLIST_MAX_LEVEL 6
 
struct snode 
{
    int key;
    struct snode **forward;
};

struct skiplist 
{
    int level;
    int size;
    struct snode *header;
};
 
struct skiplist *skiplist_init(struct skiplist  *list) 
{
    int i;
    struct snode *header = (struct snode *) malloc(sizeof(struct snode));
    list->header = header;
    header->key = INT_MAX;
    header->forward = (struct snode **) malloc(sizeof(struct snode*) * (SKIPLIST_MAX_LEVEL + 1));
    for(i = 0; i <= SKIPLIST_MAX_LEVEL; i++) 
    {
        header->forward[i] = list->header;
    }
 
    list->level = 0;
    list->size = 0;
 
    return list;
}
 
int rand_level() 
{
    int level = 1;
    while(rand() < RAND_MAX / 2 && level < SKIPLIST_MAX_LEVEL)
    {
        level++;
    }
    return level;
}
 
int skiplist_insert(struct skiplist *list, int key) 
{
    struct snode *update[SKIPLIST_MAX_LEVEL + 1];
    struct snode *x = list->header;
    int i, level;
    for(i = list->level; i >= 0; i--) 
    {
        while(x->forward[i]->key < key)
        {
            x = x->forward[i];
        }
        update[i] = x;
    }
    x = x->forward[0];
 
    if(key == x->key) 
    {
        x->key = key;
        return 0;
    } 
    else 
    {
        level = rand_level();
        if(level > list->level) 
        {
            for(i = list->level + 1; i <= level; i++) 
            {
                update[i] = list->header;
            }
            list->level = level;
        }
 
        x = (struct snode *) malloc(sizeof(struct snode));
        x->key = key;
        x->forward = (struct snode **) malloc(sizeof(struct snode*) * (level + 1));
        for(i = 0; i <= level; i++)
        {
            x->forward[i] = update[i]->forward[i];
            update[i]->forward[i] = x;
        }
    }
    return 0;
}
 
struct snode *skiplist_search(struct skiplist *list, int key)
{
    struct snode *x = list->header;
    int i;
    for(i = list->level; i >= 0; i--) 
    {
        while(x->forward[i]->key < key)
        {
            x = x->forward[i];
        }
    }
    if(x->forward[0]->key == key)
    {
        return x->forward[0];
    } 
    else 
    {
        return NULL;
    }
    return NULL;
}
 
void skiplist_node_free(struct snode *x) 
{
    if(x) 
    {
        free(x->forward);
        free(x);
    }
}
 
int skiplist_delete(struct skiplist *list, int key) 
{
    int i;
    struct snode *update[SKIPLIST_MAX_LEVEL + 1];
    struct snode *x = list->header;
    for(i = list->level; i >= 1; i--)
    {
        while(x->forward[i]->key < key)
        {
            x = x->forward[i];
        }
        update[i] = x;
    }
 
    x = x->forward[0];
    if(x->key == key)
    {
        for(i = 1; i <= list->level; i++) 
        {
            if(update[i]->forward[i] != x)
            {
                break;
            }
            update[i]->forward[0] = x->forward[i];
        }
        skiplist_node_free(x);
        while(list->level > 1 && list->header->forward[list->level] == list->header)
        {
            list->level--;
        }
        return 0;
    }
    return 1;
}
 
void skiplist_dump(struct skiplist *list) 
{
    struct snode *x = list->header;
    while(x && x->forward[0] != list->header) 
    {
        printf("%d->", x->forward[0]->key);
        x = x->forward[0];
    }
    printf("NIL\n");
}

int traverse(struct skiplist *list, int key) 
{
    int count = 0;
    struct snode *x = list->header;
    while(x && x->forward[0] != list->header && x->key != key) 
    {
        count = count + 1;
        x = x->forward[0];
    }
    return count;
}
 
int main() 
{
    int arr[] = { 3, 6, 9, 2, 11, 1, 4 }, i;
    struct skiplist list;
    skiplist_init(&list);
 
    printf("Inserted values:--------------------\n");
    for(i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) 
    {
        skiplist_insert(&list, arr[i]);
    }
    skiplist_dump(&list);
 
    printf("\nSearch:--------------------\n");
    int keys[] = { 3, 4, 7, 11, 111 };
 
    for(i = 0; i < sizeof(keys) / sizeof(keys[0]); i++) 
    {
        struct snode *x = skiplist_search(&list, keys[i]);
        if(x) 
        {
            int count1 = traverse(&list,keys[i]);
            printf("key = %d, found at %d\n", keys[i],count1);
        } 
        else 
        {
            printf("key = %d, not found\n", keys[i]);
        }
    }
    skiplist_delete(&list, 3);
    skiplist_delete(&list, 9);
    printf("\nPrinting after deletion:--------------------\n");
    skiplist_dump(&list);
 
    return 0;
}
